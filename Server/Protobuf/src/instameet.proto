syntax = "proto2";

//package instameet.server.protobuf;
package de.tubs.androidlab.instameet.server.protobuf;
option java_outer_classname = "Messages";


/// Proxy Messages
/// Without protobuf-rpc it's not possible to have multiple messages
/// to tcp server\client
/// Enum to switch over message types

message ServerRequest{
	enum Type {
		LOGIN = 1;
		CREATE_USER = 2;
		SEND_CHAT_MESSAGE = 3;
		CREATE_APPOINTMENT = 4;
		VISIT_APPOINTMENT = 5;
		ADD_FRIEND = 6;
		GET_OWN_DATA = 7;
		GET_FRIEND_LOCATION = 8;
		GET_MESSAGES = 9;
		GET_NEAR_APPOINTMENTS = 10;
		GET_MY_VISITING_APPOINTMENTS = 11;
		UPDATE_LOCATION = 12;
		GET_FRIENDS = 13;
		NO_MESSAGE = 20;
	};
	
	required Type type = 1 [default=NO_MESSAGE];
	
	optional Login login = 2;
	optional CreateUser createUser = 3;
	optional ChatMessage message = 4;
	optional CreateAppointment createAppointment = 5;
	optional VisitAppointment visitAppointment = 6;
	optional AddFriend addFriend = 7;
	optional GetOwnData getOwnData = 8;
	optional GetFriendLocation getFriendLocation = 9;
	optional GetMessages getMessages = 10;
	optional GetNearAppointments getNearAppointments = 11;
	optional GetMyVisitingAppointments getMyVisitingAppointments = 12;
	optional UpdateLocation updateLocation = 13;
	optional GetFriends getFriendList = 14;
	optional NoMessage noMessage = 15;
	
	optional string messageID = 20;
};

message ClientResponse {
	enum Type {
		LIST_FRIENDS = 1;
		LIST_LOCATIONS = 2;
		LIST_CHAT_MESSAGES = 3;
		BOOL = 4;
		SECURITY_TOKEN = 5;
		CHAT_MESSAGE = 6;
		OWN_DATA=7;
		NO_MESSAGE = 20;
	};
	
	required Type type = 1 [default=NO_MESSAGE];
	
	optional ListFriends listFriends= 2;
	optional ListLocations listLocations = 3;
	optional ListChatMessages listChatMessages = 4;
	optional BoolReply boolReply = 5;	
	optional SecurityToken token = 6;
	optional ChatMessage message = 7;
	optional OwnData userData = 8;
	optional NoMessage noMessage = 10;
		
	optional string messageID = 15;
}


/// Client -> Server Messages

message Login {
	required string name = 1;
	required string password = 2;
};

message CreateUser {
	required string name = 1;
	required string password = 2;
};

message ChatMessage {
	optional string securityToken = 1; // Clients should not get tokens from other users
	required string message = 2;
	required int32 friendID = 3;
	required int32 userID = 4;
};

message GetMessages { // If some sort of message history needs to be pulled from server
	required string securityToken = 1;
	repeated int32 friendIDs = 2;
	required int32 userID = 3;
};


message CreateAppointment {
	required string securityToken = 1;
	required SimpleAppointment appointment = 2;
	required int32 userID = 3;
};

message VisitAppointment {
	required string securityToken = 1;
	required int32 appointmentID = 2;
	required int32 userID = 3;
};

message GetNearAppointments {
	required string securityToken = 1;
	optional Location location = 2; // (Automatic) regular location update is planned
	required int32 userID = 3;
};

message AddFriend {
	required string securityToken = 1;
	optional int32 friendID = 2;
	optional string friendName = 3;
	required int32 userID = 4;
};

message GetOwnData { // What is exactly returned here?
	required string securityToken = 1;
	optional int32 userID = 2;
};

message GetFriends {
	required string securityToken = 1;
	repeated int32 friendIDs = 2;
	required int32 userID = 3;
};

message GetUsers {
	required string securityToken = 1;
	repeated int32 friendIDs = 2;
	required int32 userID = 3;
}

message GetFriendLocation {
	required string securityToken = 1;
	required int32 friendID = 2;
	required int32 userID = 3;
};

message GetMyVisitingAppointments {
	required string securityToken = 1;
	required int32 userID = 2;
};

message UpdateLocation {
	required string securityToken = 1;
	required Location location = 2;
	required int32 userID = 3;
};


/// Server -> Client Replies

message ListFriends {
	repeated SimpleUser friends = 1;
}

message ListLocations {
	repeated Location location = 1;
}

message ListChatMessages {
	repeated ChatMessage messages = 1;
}

message BoolReply {
	required bool isTrue = 1;
}

message OwnData {
	required SimpleUser userData = 1;
}


/// Message types for both directions

message SimpleAppointment {
	required int32 id = 1;
	required string title = 2;
	required Location location = 3;
	required Time time = 4;
	required SimpleUser hoster = 5;
	repeated SimpleUser participants = 6;
	required string description = 7;
};

message SimpleUser {
 	required string userName = 1; 
 	required int32 userID = 2;
 	optional Time latestLocationUpdate = 3;
 	optional Location location = 4;
 	repeated int32 friendIDs = 5;
 	repeated int32 hostedAppointmentIDs = 6;
 	repeated int32 visitingAppointmentIDs = 7;
}

message Location {
	required double longitude = 1;
	required double lattitude = 2;
};

message Time {
	required string time = 1;
}

message SecurityToken {
	required string token = 1;
}

/// Helper types -> May be removed later

message NoMessage {

}

message MapFriends {
	required Pair_Double_SimpleAppointment map = 1;
};

message MapAppointmentDistance {
	repeated Pair_Double_SimpleAppointment map = 1;
};

message MapAppointmentID {
	repeated Pair_Int32_SimpleAppointment map = 1;
};

message MapUserID {
	repeated Pair_Int32_SimpleUser map = 1;
};

message Pair_Int32_SimpleUser {
	required int32 key = 1;
	required SimpleUser value = 2;
};

message Pair_Int32_SimpleAppointment {
	required int32 key = 1;
	required SimpleAppointment value = 2;
};

message Pair_Double_SimpleAppointment {
	required double key = 1;
	required SimpleAppointment value = 2;
};
