syntax = "proto2";

package instameet.server.protobuf;
option java_outer_classname = "ServerRequests";


// Proxy Messages
// Without protobuf-rpc it's not possible to have multiple messages
// to tcp server\client

// Enum to switch over message types

message ServerRequest{
	enum Type {
		LOGIN = 1;
		CREATE_USER = 2;
		SEND_MESSAGE = 3;
		CREATE_APPOINTMENTS = 4;
		VISIT_APPOINTMENTS = 5;
		ADD_FRIEND = 6;
		GET_OWN_DATA = 7;
		GET_FRIEND_LOCATION = 8;
		GET_MESSAGES = 9;
		GET_NEAR_APPOINTMENTS = 10;
		GET_MY_VISITING_APPOINTMENTS = 11;
		UPDATE_LOCATION = 12;
		NO_MESSAGE = 20;
	};
	
	required Type type = 1 [default=NO_MESSAGE];
	
	optional Login login = 2;
	optional CreateUser createUser = 3;
	optional SendMessage sendMessage = 4;
	optional CreateAppointments createAppointments = 5;
	optional VisitAppointments visitAppointments = 6;
	optional AddFriend addFriend = 7;
	optional GetOwnData getOwnData = 8;
	optional GetFriendLocation getFriendLocation = 9;
	optional GetMessages getMessages = 10;
	optional GetNearAppointments getNearAppointments = 11;
	optional GetMyVisitingAppointments getMyVisitingAppointments = 12;
	optional UpdateLocation updateLocation = 13;
	
	optional NoMessage noMessage = 20;
};


// Client -> Server Messages

message Login {
	required string name = 1;
	required string password = 2;
};

message CreateUser {
	required string name = 1;
	required string password = 2;
};

message SendMessage {
	required string message = 1;
	required int32 userID = 2;
	required string securityToken = 3;
};

message CreateAppointments {
	required SimpleAppointment appointment = 1;
	required int32 userID = 2;
	required string securityToken = 3;
};

message VisitAppointments {
	required int32 appointmentID = 1;
	required int32 userID  = 2;
	required string securityToken = 3;
};

message AddFriend {
	required int32 friendID = 1;
	required int32 userID  = 2;
	required string securityToken = 3;
};

message GetOwnData {
	required int32 userID = 1;
	required string securityToken = 2;
};

message GetFriends {
	required int32 userID = 1;
	required string securityToken = 2;
};

message GetFriendLocation {
	required int32 friendID = 1;
	required int32 userID  = 2;
	required string securityToken = 3;
};

message GetMessages {
	required int32 userID = 1;
	required string securityToken = 2;
};

message GetNearAppointments {
	required Location location = 1;
	required int32 userID = 2;
	required string securityToken = 3;
};

message GetMyVisitingAppointments {
	required int32 userID = 1;
	required string securityToken = 2;
};

message UpdateLocation {
	required Location location = 1;
	required int32 userID = 2;
	required string securityToken = 3;
};

message SimpleAppointment {
	required int32 id = 1;
	required string title = 2;
	required Location location = 3;
	required Time time = 4;
	required int32 hosterID = 5;
	repeated int32 participants = 6 [packed=true];
};

// Server -> Client Replies

message SimpleUser {
 	required int32 id = 1;
 	required string userName = 2; 
 	required Time latestLocationUpdate = 3;
 	required Location location = 4;
}

message Pair_Int32_SimpleUser {
	required int32 key = 1;
	required SimpleUser value = 2;
};

message Pair_Int32_SimpleAppointment {
	required int32 key = 1;
	required SimpleAppointment value = 2;
};

message Pair_Double_SimpleAppointment {
	required double key = 1;
	required SimpleAppointment value = 2;
};

message MapFriends {
	required Pair_Double_SimpleAppointment map = 1;
};

message MapAppointmentDistance {
	required Pair_Int32_SimpleUser map = 1;
};

message MapAppointmentID {
	required Pair_Int32_SimpleAppointment map = 1;
};

message ListLocation {
	repeated Location location = 1;
}

message ListMessages {
	repeated string message = 1;
}

message boolReply {
	required bool isTrue = 1;
}


// Message types for both directions

message Location {
	required double longitude = 1;
	required double lattitude = 2;
};

message Time {
	required string time = 1;
}

message NoMessage {

}